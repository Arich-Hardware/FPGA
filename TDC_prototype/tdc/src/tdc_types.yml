# tdc_types.yml
# This defines custom types used in the TDC project
# these are converted to VHDL with supporting functions by Thiago's yml2hdl.py
# (https://gitlab.com/tcpaiva/yml2hdl.git v0.2.1)

# enable automatic generation of convert functions for basic types,
# and include some standard IEEE libraries
config:
    basic_convert_functions : on
    packages:
      - IEEE:
        - std_logic_1164
        - numeric_std
        - math_real

types:

  # things which may change frequently
  - NUM_TDC_CHANNELS: [qualifier: constant, type: integer, value: 4] # number of channels
  - TRIGGER_WINDOW: [qualifier: constant, type: integer, value: 25] # trigger window in clocks
  - TDC_TIMEOUT: [qualifier: constant, type: integer, value: 35]    # timeout window in clocks

  # basic TDC characteristics
  - TDC_COARSE_BITS: [qualifier: constant, type: integer, value: 6] # coarse time width
  - TDC_PHASE_BITS: [qualifier: constant, type: integer, value: 2]  # phase bits
  - NUM_TDC_BUFFERS: [qualifier: constant, type: integer, value: 4] # multi-hit buffers

  # readout-related
  - TDC_TRIG_BITS: [qualifier: constant, type: integer, value: 8]   # trigger bits in buffer
  - TDC_FIFO_DEPTH: [qualifier: constant, type: integer, value: 64]   # FIFO depth

  # trigger TDC characteristics
  - TRIG_TDC_BITS: [qualifier: constant, type: integer, value: 32] # coarse time width
  - TRIG_EVN_BITS: [qualifier: constant, type: integer, value: 18] # Event number bits

  # temporary DAQ width
  - DAQ_OUT_BITS: [qualifier: constant, type: integer, value: 64]

  # upper bits used to flag DAQ words
  - DAQ_TYPE_BITS: [qualifier: constant, type: integer, value: 4]

  # DAQ word types in upper bits
  - DAQ_TYPE_IDLE: [qualifier: constant, type: integer, value: 1]
  - DAQ_TYPE_HEADER: [qualifier: constant, type: integer, value: 2]
  - DAQ_TYPE_TRAILER: [qualifier: constant, type: integer, value: 3]
  - DAQ_TYPE_DATA: [qualifier: constant, type: integer, value: 4]

  # calculate number of bits to hold various quantities
  # (this is possibly fragile code, dependent on specific yml2hdl version)

  # timeout counter bits
  - TDC_TIMEOUT_BITS: [qualifier: constant, type: integer, value: integer(ceil(log2(real(TDC_TIMEOUT)))) ] 
  # channel number bits
  - TDC_CHAN_NUM_BITS: [qualifier: constant, type: integer, value: integer(ceil(log2(real(NUM_TDC_CHANNELS)))) ]
  # buffer count bits
  - TDC_BUFFER_NUM_BITS: [qualifier: constant, type: integer, value: integer(ceil(log2(real(NUM_TDC_BUFFERS)))) ]

# base type for one TDC hit (size: 16)
  - tdc_hit_data:
      - le_time: [type: unsigned, length: TDC_COARSE_BITS]
      - le_phase: [type: logic, length: TDC_PHASE_BITS]
      - te_time: [type: unsigned, length: TDC_COARSE_BITS]
      - te_phase: [type: logic, length: TDC_PHASE_BITS]
  
# type for one TDC buffer inside the TDC logic
  - tdc_buffer:
      - hit: [type: tdc_hit_data]
      - readme: [type: logic]

  - tdc_buffer_group: [array: NUM_TDC_BUFFERS, type: tdc_buffer]

# type for output of multi-hit TDC (size: 21)
  - tdc_output:							      # 30 total
      - channel_number: [type: unsigned, length: TDC_CHAN_NUM_BITS]   #  2
      - hit: [type: tdc_hit_data]	 	 		      # 16
      - trigger_number: [type: unsigned, length: TDC_TRIG_BITS]	      #  8
      - buffer_number: [type: unsigned, length: TDC_BUFFER_NUM_BITS]  #  2
      - glitch: [type: logic] 					      #  1
      - error: [type: logic]					      #  1
        
# type for array of TDC outputs
  - tdc_output_array: [array: NUM_TDC_CHANNELS, type: tdc_output]

# trigger TDC
  - trigger_tdc_hit:
      - trig_time: [type: unsigned, length: TRIG_TDC_BITS]
      - trig_phase: [type: logic, length: TDC_PHASE_BITS]
      - trig_event: [type: unsigned, length: TRIG_EVN_BITS]

